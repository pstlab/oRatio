@startuml smt
skinparam monochrome true
skinparam handwritten true

class theory
theory : #bind(v:var): bool
theory : #record(cls:vector<lit>): bool
theory : -propagate(p: lit, cnfl: vector<lit>): bool
theory : -check(cnfl: vector<lit>): bool
theory : -push(): void
theory : -pop(): void

enum lbool {
    True
    False
    Undefined
}

class lit
lit : +v: var
lit : +sign: bool

class clause
clause : +propagate(p: lit): bool
clause "1" o-- "2..*" lit: lits

class sat_core
sat_core : -watches: vector<vector<clause>>
sat_core : -prop_q: queue<lit>
sat_core : -trail: vector<lit>
sat_core : -trail_lim: vector<unsigned>
sat_core : -reason: vector<clause>
sat_core : -level: vector<unsigned>
sat_core : +new_var(): var
sat_core : +new_clause(lits: vector<lit>): bool
sat_core : +new_eq(l: lit, r: lit): var
sat_core : +new_conj(lits: vector<lit>): var
sat_core : +new_disj(lits: vector<lit>): var
sat_core : +new_exct_one(lits: vector<lit>): var
sat_core : +assume(p: lit): bool
sat_core : +pop(): void
sat_core : +value(x: var): lbool
sat_core : +value(p: lit): lbool
sat_core : +root_level(): bool
sat_core : +check(): bool
sat_core : +check(lits: vector<lit>): bool
sat_core : -propagate(cnfl: vector<lit>):bool
sat_core : -analyze(cnfl: vector<lit>, out_learnt: vector<lit>, out_btlevel: unsigned): void
sat_core : -record(cnfl: vector<lit>): void
sat_core : -enqueue(p: lit, c: clause): bool
sat_core : -pop_one(): void
sat_core : {static} -index(p: lit): unsigned
sat_core : -add_theory(th: theory): void
sat_core : -remove_theory(th: theory): void
sat_core : -bind(x: var, th: theory): void
sat_core : -unbind(x: var, th: theory): void
sat_core : -listen(x: var, l: sat_value_listener): void
sat_core : -forget(x: var, l: sat_value_listener): void
sat_core o--> "*" lbool: assigns
sat_core "1" o--> "*" theory: theories
sat_core "1" *--> "*" clause: constrs
sat_core "1" o--> "*" sat_value_listener: value_listeners

class sat_value_listener
sat_value_listener : #listen(v:var):void
sat_value_listener : -sat_value_change(v:var):void

class lin
lin : -vars: map<var, double>
lin : -k: double
lin : to_string(): string

note "The to_string() procedure is required for reusing expressions by the linear arithmetic theory" as N1
lin .. N1

enum op {
    leq
    geq
}

class assertion
assertion : -b: var
assertion : -x: var
assertion : -v: double
assertion : +propagate_lb(x: var, cnfl: vector<lit>): bool
assertion : +propagate_ub(x: var, cnfl: vector<lit>): bool
assertion --> "1" lra_theory: th
assertion --> "1" op: o

class row
row : -x: var
row : +propagate_lb(x: var, cnfl: vector<lit>): bool
row : +propagate_ub(x: var, cnfl: vector<lit>): bool
row --> "1" lra_theory: th
row --> "1" lin: l

class bound
bound : val: double
bound *--> "1" lit: reason

class lra_theory
theory <|-- lra_theory
lra_theory : -vals: vector<double>
lra_theory : -tableau: map<var, row>
lra_theory : -exprs: map<string, var>
lra_theory : -a_watches: vector<vector<assertion>>
lra_theory : -t_watches: vector<set<row>>
lra_theory : +new_var(): var
lra_theory : +new_lt(l: lin, r: lin): var
lra_theory : +new_leq(l: lin, r: lin): var
lra_theory : +new_geq(l: lin, r: lin): var
lra_theory : +new_gt(l: lin, r: lin): var
lra_theory : -mk_slack(l: lin): var
lra_theory : -propagate(p: lit, cnfl: vector<lit>): bool
lra_theory : -check(cnfl: vector<lit>): bool
lra_theory : -push(): void
lra_theory : -pop(): void
lra_theory : -assert_lower(x_i: var, val: double, p: lit, cnfl: vector<lit>): bool
lra_theory : -assert_upper(x_i: var, val: double, p: lit, cnfl: vector<lit>): bool
lra_theory : -update(x_i: var, val: double): void
lra_theory : -pivot_and_update(x_i: var, x_j: var, val: double): void
lra_theory : -pivot(x_i: var, x_j: var): void
lra_theory : -listen(x: var, l: la_value_listener): void
lra_theory : -forget(x: var, l: la_value_listener): void
lra_theory : {static} -lb_index(x: var): unsigned
lra_theory : {static} -ub_index(x: var): unsigned
lra_theory o--> "*" bound: assigns
lra_theory "1" o--> "*" la_value_listener: value_listeners

class la_value_listener
la_value_listener : #listen(v: var): void
la_value_listener : -la_value_change(v: var): void

class var_value

class ov_theory
theory <|-- ov_theory
ov_theory : +new_var(): var
ov_theory : +allows(v: var, val: ov_value): var
ov_theory : +new_eq(l: var, r: var): var
ov_theory : -propagate(p: lit, cnfl: vector<lit>): bool
ov_theory : -check(cnfl: vector<lit>): bool
ov_theory : -push(): void
ov_theory : -pop(): void
ov_theory "1" o--> "*" ov_value_listener: value_listeners

class ov_value_listener
ov_value_listener : #listen(v: var): void
ov_value_listener : -ov_value_change(v: var): void

@enduml