set(TEMPORAL_NETWORK_TYPES DL LA)
set(TEMPORAL_NETWORK_TYPE LA CACHE STRING "Temporal network type")
set_property(CACHE TEMPORAL_NETWORK_TYPE PROPERTY STRINGS ${TEMPORAL_NETWORK_TYPES})

set(HEURISTIC_TYPES h_max h_add)
set(HEURISTIC_TYPE "h_max" CACHE STRING "Heuristic type")
set_property(CACHE HEURISTIC_TYPE PROPERTY STRINGS "h_max" "h_add")

option(DEFERRABLE_FLAWS "Check for deferrable flaws" ON)
option(CHECK_INCONSISTENCIES "Check inconsistencies at each step" OFF)

file(GLOB SOLVER_SOURCES *.cpp flaws/*.cpp types/*.cpp heuristics/*.cpp)

add_library(solver SHARED ${SOLVER_SOURCES})
GENERATE_EXPORT_HEADER(solver)
target_include_directories(solver PUBLIC ${CMAKE_CURRENT_BINARY_DIR} . ${oRatio_SOURCE_DIR}/smt ${oRatio_SOURCE_DIR}/smt/lra ${oRatio_SOURCE_DIR}/smt/ov ${oRatio_SOURCE_DIR}/smt/dl ${oRatio_SOURCE_DIR}/core ${oRatio_SOURCE_DIR}/riddle flaws types heuristics)
target_link_libraries(solver PUBLIC core)

message(STATUS "Temporal network type:    ${TEMPORAL_NETWORK_TYPE}")
if(TEMPORAL_NETWORK_TYPE MATCHES DL)
    target_compile_definitions(solver PRIVATE DL_TN)
    configure_file(init_dl.rddl ${CMAKE_BINARY_DIR}/init.rddl COPYONLY)
elseif(TEMPORAL_NETWORK_TYPE MATCHES LA)
    target_compile_definitions(solver PRIVATE LA_TN)
    configure_file(init_la.rddl ${CMAKE_BINARY_DIR}/init.rddl COPYONLY)
else()
    message(FATAL_ERROR "TEMPORAL_NETWORK_TYPE must be one of ${TEMPORAL_NETWORK_TYPES}")
endif()

message(STATUS "Heuristic type:           ${HEURISTIC_TYPE}")
if(HEURISTIC_TYPE MATCHES h_max)
    target_compile_definitions(solver PRIVATE H_MAX)
elseif(HEURISTIC_TYPE MATCHES h_add)
    target_compile_definitions(solver PRIVATE H_ADD)
else()
    message(FATAL_ERROR "HEURISTIC_TYPE must be one of ${HEURISTIC_TYPES}")
endif()

message(STATUS "Deferrable flaws:         ${DEFERRABLE_FLAWS}")
if(DEFERRABLE_FLAWS)
    target_compile_definitions(solver PRIVATE DEFERRABLE_FLAWS)
endif()

message(STATUS "Check inconsistencies:    ${CHECK_INCONSISTENCIES}")
if(CHECK_INCONSISTENCIES)
    target_compile_definitions(solver PRIVATE CHECK_INCONSISTENCIES)
endif()

if(BUILD_TESTING)
    add_subdirectory(tests)
endif()