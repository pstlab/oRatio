set(TEMPORAL_NETWORK_TYPES DL LA)
set(TEMPORAL_NETWORK_TYPE LA CACHE STRING "Temporal network type")
set_property(CACHE TEMPORAL_NETWORK_TYPE PROPERTY STRINGS ${TEMPORAL_NETWORK_TYPES})

set(HEURISTIC_TYPES h_max h_add h2_max h2_add)
set(HEURISTIC_TYPE h_max CACHE STRING "Heuristic type")
set_property(CACHE HEURISTIC_TYPE PROPERTY STRINGS ${HEURISTIC_TYPES})

option(DEFERRABLE_FLAWS "Check for deferrable flaws" ON)
option(CHECK_INCONSISTENCIES "Check inconsistencies at each step" OFF)

file(GLOB SOLVER_SOURCES *.cpp flaws/*.cpp types/*.cpp heuristics/*.cpp)

add_library(solver SHARED ${SOLVER_SOURCES})
GENERATE_EXPORT_HEADER(solver)
target_include_directories(solver PUBLIC ${CMAKE_CURRENT_BINARY_DIR} . flaws types heuristics)
target_link_libraries(solver PUBLIC core)
install(TARGETS solver LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

message(STATUS "Temporal network type:    ${TEMPORAL_NETWORK_TYPE}")
if(TEMPORAL_NETWORK_TYPE STREQUAL DL)
    target_compile_definitions(solver PRIVATE DL_TN)
    set(INIT_STRING "predicate Impulse(tp at) { at >= origin; at <= horizon; } predicate Interval(tp start, tp end) { start >= origin; start <= end; end <= horizon; } tp origin; tp horizon; origin >= 0.0; origin <= horizon;")
elseif(TEMPORAL_NETWORK_TYPE STREQUAL LA)
    target_compile_definitions(solver PRIVATE LA_TN)
    set(INIT_STRING "predicate Impulse(real at) { at >= origin; at <= horizon; } predicate Interval(real start, real end, real duration) { start >= origin; end <= horizon; duration == end - start; duration >= 0.0; } real origin; real horizon; origin >= 0.0; origin <= horizon;")
else()
    message(FATAL_ERROR "TEMPORAL_NETWORK_TYPE must be one of ${TEMPORAL_NETWORK_TYPES}")
endif()
configure_file(init.h.in init.h @ONLY)

message(STATUS "Heuristic type:           ${HEURISTIC_TYPE}")
if(HEURISTIC_TYPE STREQUAL h_max)
    target_compile_definitions(solver PRIVATE H_MAX)
elseif(HEURISTIC_TYPE STREQUAL h_add)
    target_compile_definitions(solver PRIVATE H_ADD)
elseif(HEURISTIC_TYPE STREQUAL h2_max)
    target_compile_definitions(solver PRIVATE H2_MAX)
elseif(HEURISTIC_TYPE STREQUAL h2_add)
    target_compile_definitions(solver PRIVATE H2_ADD)
else()
    message(FATAL_ERROR "HEURISTIC_TYPE must be one of ${HEURISTIC_TYPES}")
endif()

message(STATUS "Deferrable flaws:         ${DEFERRABLE_FLAWS}")
if(DEFERRABLE_FLAWS)
    target_compile_definitions(solver PRIVATE DEFERRABLE_FLAWS)
endif()

message(STATUS "Check inconsistencies:    ${CHECK_INCONSISTENCIES}")
if(CHECK_INCONSISTENCIES)
    target_compile_definitions(solver PRIVATE CHECK_INCONSISTENCIES)
endif()

if(BUILD_TESTING)
    add_subdirectory(tests)
endif()

if(MSVC)
    target_compile_options(solver PRIVATE /W4)
else()
    target_compile_options(solver PRIVATE -Wall -Wextra -pedantic)
endif()