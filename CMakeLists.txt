cmake_minimum_required(VERSION 3.0.0)
project(oRatio VERSION 2.2.0)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(JNI)
find_package(Threads)

include(CTest)
enable_testing()

file(GLOB SOURCES main.cpp smt/*.cpp smt/lra/*.cpp smt/ov/*.cpp smt/dl/*.cpp riddle/*.cpp core/*.cpp solver/*.cpp solver/types/*.cpp)
include_directories(smt smt/parallel smt/lra smt/ov smt/dl riddle core solver solver/types executor api/java/src/main/cpp)

set(THREADS_PREFER_PTHREAD_FLAG ON)

set(TEMPORAL_NETWORK_TYPES DL LA)
set(TEMPORAL_NETWORK_TYPE LA CACHE STRING "Temporal network type")
set_property(CACHE TEMPORAL_NETWORK_TYPE PROPERTY STRINGS ${TEMPORAL_NETWORK_TYPES})

set(HEURISTIC_TYPES h_max h_add)
set(HEURISTIC_TYPE "h_max" CACHE STRING "Heuristic type")
set_property(CACHE HEURISTIC_TYPE PROPERTY STRINGS "h_max" "h_add")

set(HOST "127.0.0.1" CACHE STRING "Solver listener host")
set(SOLVER_PORT 1100 CACHE STRING "Solver listener port")
set(EXECUTOR_PORT 1101 CACHE STRING "Executor listener port")
add_compile_definitions(HOST="${HOST}" SOLVER_PORT=${SOLVER_PORT} EXECUTOR_PORT=${EXECUTOR_PORT})

option(DEFERRABLE_FLAWS "Check for deferrable flaws" ON)
option(CHECK_INCONSISTENCIES "Check inconsistencies at each step" OFF)
option(BUILD_EXECUTOR "Builds the executor" OFF)
option(BUILD_GUI "Builds the GUI" OFF)
option(BUILD_JAVA_LIB "Builds the Java lib" OFF)
option(OPTIMIZE_FOR_NATIVE_ARCH "Optimize for native arch" OFF)

message(STATUS "Temporal network type:    ${TEMPORAL_NETWORK_TYPE}")
if(TEMPORAL_NETWORK_TYPE MATCHES DL)
    add_compile_definitions(DL_TN)
    configure_file(solver/init_dl.rddl ${CMAKE_BINARY_DIR}/init.rddl COPYONLY)
elseif(TEMPORAL_NETWORK_TYPE MATCHES LA)
    add_compile_definitions(LA_TN)
    configure_file(solver/init_la.rddl ${CMAKE_BINARY_DIR}/init.rddl COPYONLY)
else()
    message(FATAL_ERROR "TEMPORAL_NETWORK_TYPE must be one of ${TEMPORAL_NETWORK_TYPES}")
endif()

message(STATUS "Heuristic type:           ${HEURISTIC_TYPE}")
if(HEURISTIC_TYPE MATCHES h_max)
    add_compile_definitions(H_MAX)
elseif(HEURISTIC_TYPE MATCHES h_add)
    add_compile_definitions(H_ADD)
else()
    message(FATAL_ERROR "HEURISTIC_TYPE must be one of ${HEURISTIC_TYPES}")
endif()

message(STATUS "Deferrable flaws:         ${DEFERRABLE_FLAWS}")
if(DEFERRABLE_FLAWS)
    add_compile_definitions(DEFERRABLE_FLAWS)
endif()

message(STATUS "Check inconsistencies:    ${CHECK_INCONSISTENCIES}")
if(CHECK_INCONSISTENCIES)
    add_compile_definitions(CHECK_INCONSISTENCIES)
endif()

message(STATUS "Build executor:           ${BUILD_EXECUTOR}")
if(BUILD_EXECUTOR)
    add_compile_definitions(BUILD_EXECUTOR BUILD_LISTENERS)
    list(APPEND SOURCES executor/executor.cpp)
    add_subdirectory(executor/tests)
endif()

message(STATUS "Build GUI:                ${BUILD_GUI}")
if(BUILD_GUI)
    message(STATUS "Solver listener host:     ${HOST}")
    message(STATUS "Solver listener port:     ${SOLVER_PORT}")
    add_compile_definitions(BUILD_GUI BUILD_LISTENERS)
    list(APPEND SOURCES api/java/src/main/cpp/solver_socket_listener.cpp)
    if(BUILD_EXECUTOR)
        message(STATUS "Executor listener port:   ${EXECUTOR_PORT}")
        list(APPEND SOURCES api/java/src/main/cpp/executor_socket_listener.cpp)
    endif()
endif()

message(STATUS "Optimize for native arch: ${OPTIMIZE_FOR_NATIVE_ARCH}")
if(OPTIMIZE_FOR_NATIVE_ARCH)
    if(MSVC)
        message(STATUS "Using AVX2..")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -arch:AVX2")
    else()
        message(STATUS "Using native optimization..")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
    endif()
endif()

add_executable(${PROJECT_NAME} ${SOURCES})
target_link_libraries(${PROJECT_NAME} PRIVATE Threads::Threads)

if(BUILD_GUI AND WIN32)
    target_link_libraries(${PROJECT_NAME} PRIVATE wsock32 ws2_32 #[[-PROFILE]])
endif()

message(STATUS "Build Java bindings:      ${BUILD_JAVA_LIB}")
if(BUILD_JAVA_LIB)
    add_compile_definitions(BUILD_JAVA_LIB)
    include_directories(${JNI_INCLUDE_DIRS})
    list(APPEND SOURCES api/java/src/main/cpp/it_cnr_istc_pst_oratio_Solver.cpp)
    add_library ("${PROJECT_NAME}-lib" SHARED ${SOURCES})
    if(BUILD_GUI AND WIN32)
        target_link_libraries("${PROJECT_NAME}-lib" PRIVATE wsock32 ws2_32 #[[-PROFILE]])
    endif()
endif()

add_subdirectory(smt/tests)
add_subdirectory(riddle/tests)
add_subdirectory(core/tests)
add_subdirectory(solver/tests)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
