real base_x = 0.0;
real base_y = 0.0;

real phys_x = 25.0;
real phys_y = 13.0;

real cogn_x = 15.0;
real cogn_y = 23.0;

class Navigator : StateVariable {

    predicate At(real x, real y) {
        duration >= 5.0;
        goal going_at = new GoingTo(end:start, x:x, y:y);
    }

    predicate GoingTo(real x, real y) {
        duration >= 60.0;
        goal at = new At(end:start);
    }
}

class Robot : StateVariable {

    Navigator nav = new Navigator();

    predicate CheckUserAround() {
        duration >= 10.0;
        duration <= 100.0;
    }

    predicate CognitiveExcercize(int id) {
        duration >= 60.0;

        goal at = new nav.At(x:cogn_x, y:cogn_y);
        at.start <= start - 10.0;
        at.end >= end + 5.0;

        goal chck_usr = new CheckUserAround(end:start);
        chck_usr.start <= at.start;

        goal going_at0 = new nav.GoingTo(start:at.end, x:base_x, y:base_y);
        goal at0 = new nav.At(start:going_at0.end, x:base_x, y:base_y);
        at0.start >= end;
        at0.start <= end + 300.0;
    }

    predicate PhysicalExcercize(int id) {
        duration >= 60.0;

        goal at = new nav.At(x:phys_x, y:phys_y);
        at.start <= start - 10.0;
        at.end >= end + 5.0;

        goal chck_usr = new CheckUserAround(end:start);
        chck_usr.start <= at.start;

        goal going_at0 = new nav.GoingTo(start:at.end, x:base_x, y:base_y);
        goal at0 = new nav.At(start:going_at0.end, x:base_x, y:base_y);
        at0.start >= end;
        at0.start <= end + 300.0;
    }
}

predicate KeepHealthy(Robot r) {
    goal ce = new r.CognitiveExcercize(id:1);
    goal pe = new r.PhysicalExcercize(id:2);
    ce.end <= pe.start - 600.0;
}

Robot r0 = new Robot();

fact at0 = new r0.nav.At(start:origin, x:base_x, y:base_y);
at0.duration >= 10.0;

goal keep_healthy = new KeepHealthy(r:r0);