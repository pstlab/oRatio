/**
* Domain: Blocks
*/

class Object {

    real id;

    Object(real id) : id(id) {}
}

class Block : Object {

    Block(real id) : Object(id) {}
}

class BlocksState : PropositionalState {

    BlocksAgent agent;

    BlocksState(BlocksAgent agent) : agent(agent) {}

    predicate On(Block x, Block y) {
        duration >= 1.0;
        goal stack = new agent.Stack(at:start, x:x, y:y);
    }

    predicate Ontable(Block x) {
        duration >= 1.0;
        goal put_down = new agent.Put_down(at:start, x:x);
    }

    predicate Clear(Block x) {
        duration >= 1.0;
        {
           goal put_down = new agent.Put_down(at:start, x:x);
        } or {
           goal stack = new agent.Stack(at:start, x:x);
        } or {
           goal unstack = new agent.Unstack(at:start, y:x);
        }
    }

    predicate Handempty() {
        duration >= 1.0;
        {
           goal put_down = new agent.Put_down(at:start);
        } or {
           goal stack = new agent.Stack(at:start);
        }
    }

    predicate Holding(Block x) {
        duration >= 1.0;
        {
           goal pick_up = new agent.Pick_up(at:start, x:x);
        } or {
           goal unstack = new agent.Unstack(at:start, x:x);
        }
    }
}

class BlocksAgent : PropositionalAgent {

    BlocksState propositional_state;

    BlocksAgent() : propositional_state(new BlocksState(this)) {}

    predicate Pick_up(Block x) : Impulse {
        goal clear_x = new propositional_state.Clear(polarity:true, x:x);  clear_x.start <= at - 1.0;  clear_x.end >= at;
        goal ontable_x = new propositional_state.Ontable(polarity:true, x:x);  ontable_x.start <= at - 1.0;  ontable_x.end >= at;
        goal handempty = new propositional_state.Handempty(polarity:true);  handempty.start <= at - 1.0;  handempty.end >= at;
        fact not_ontable_x = new propositional_state.Ontable(polarity:false, x:x, start:at);  not_ontable_x.duration >= 1.0;
        fact not_clear_x = new propositional_state.Clear(polarity:false, x:x, start:at);  not_clear_x.duration >= 1.0;
        fact not_handempty = new propositional_state.Handempty(polarity:false, start:at);  not_handempty.duration >= 1.0;
        fact holding_x = new propositional_state.Holding(polarity:true, x:x, start:at);  holding_x.duration >= 1.0;
    }

    predicate Put_down(Block x) : Impulse {
        goal holding_x = new propositional_state.Holding(polarity:true, x:x);  holding_x.start <= at - 1.0;  holding_x.end >= at;
        fact not_holding_x = new propositional_state.Holding(polarity:false, x:x, start:at);  not_holding_x.duration >= 1.0;
        fact clear_x = new propositional_state.Clear(polarity:true, x:x, start:at);  clear_x.duration >= 1.0;
        fact handempty = new propositional_state.Handempty(polarity:true, start:at);  handempty.duration >= 1.0;
        fact ontable_x = new propositional_state.Ontable(polarity:true, x:x, start:at);  ontable_x.duration >= 1.0;
    }

    predicate Stack(Block x, Block y) : Impulse {
        goal holding_x = new propositional_state.Holding(polarity:true, x:x);  holding_x.start <= at - 1.0;  holding_x.end >= at;
        goal clear_y = new propositional_state.Clear(polarity:true, x:y);  clear_y.start <= at - 1.0;  clear_y.end >= at;
        fact not_holding_x = new propositional_state.Holding(polarity:false, x:x, start:at);  not_holding_x.duration >= 1.0;
        fact not_clear_y = new propositional_state.Clear(polarity:false, x:y, start:at);  not_clear_y.duration >= 1.0;
        fact clear_x = new propositional_state.Clear(polarity:true, x:x, start:at);  clear_x.duration >= 1.0;
        fact handempty = new propositional_state.Handempty(polarity:true, start:at);  handempty.duration >= 1.0;
        fact on_x_y = new propositional_state.On(polarity:true, x:x, y:y, start:at);  on_x_y.duration >= 1.0;
    }

    predicate Unstack(Block x, Block y) : Impulse {
        goal on_x_y = new propositional_state.On(polarity:true, x:x, y:y);  on_x_y.start <= at - 1.0;  on_x_y.end >= at;
        goal clear_x = new propositional_state.Clear(polarity:true, x:x);  clear_x.start <= at - 1.0;  clear_x.end >= at;
        goal handempty = new propositional_state.Handempty(polarity:true);  handempty.start <= at - 1.0;  handempty.end >= at;
        fact holding_x = new propositional_state.Holding(polarity:true, x:x, start:at);  holding_x.duration >= 1.0;
        fact clear_y = new propositional_state.Clear(polarity:true, x:y, start:at);  clear_y.duration >= 1.0;
        fact not_clear_x = new propositional_state.Clear(polarity:false, x:x, start:at);  not_clear_x.duration >= 1.0;
        fact not_handempty = new propositional_state.Handempty(polarity:false, start:at);  not_handempty.duration >= 1.0;
        fact not_on_x_y = new propositional_state.On(polarity:false, x:x, y:y, start:at);  not_on_x_y.duration >= 1.0;
    }
}