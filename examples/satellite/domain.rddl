class Orientation {

    real pan;
    real tilt;

    Orientation(real pan, real tilt) : pan(pan), tilt(tilt) {}
}

class PointingSystem : StateVariable {

    predicate Pointing(Orientation o) {
        duration >= 1.0;
        {
            goal sl = new Slewing(o:o, end:start);
        } or {
            goal fs = new FastSlewing(o:o, end:start);
        }
    }

    predicate Slewing(Orientation o) {
        duration >= 10.0;
        goal p_at = new Pointing(end:start);
    }

    predicate FastSlewing(Orientation o) {
        duration >= 5.0;
        goal p_at = new Pointing(end:start);
    }
}

class Camera : StateVariable {

    PointingSystem pointing_module;

    Camera(PointingSystem pointing_module) : pointing_module(pointing_module) {}

    predicate TakingPicture(Orientation o) {
        duration >= 2.0;
        goal p_at = new pointing_module.Pointing(o:o);
        p_at.start <= start;
        p_at.end >= end;
    }
}

class VisibilityWindow : StateVariable {

    predicate Visible() {
        false;
    }

    predicate NotVisible() {
        false;
    }
}

class Satellite {

    PointingSystem pointing_module;
    Camera camera;
    VisibilityWindow visibility_window;
    ReusableResource antenna;
    ReusableResource memory;

    Satellite() : pointing_module(new PointingSystem()), camera(new Camera(pointing_module)), visibility_window(new VisibilityWindow()), antenna(new ReusableResource(2.0)), memory(new ReusableResource(3.0)) {}

    predicate Pointing(Orientation o) : Interval {
        goal p_at = new pointing_module.Pointing(o:o, start:start, end:end, duration:duration);
    }

    predicate Communicate(Orientation o) : Interval {
        duration == 10.0;
        goal tp = new camera.TakingPicture(o:o);
        tp.end <= start;
        goal vis = new visibility_window.Visible();
        vis.start <= start;
        vis.end >= end;
        fact com_use = new antenna.Use(amount:1.0, start:start, end:end, duration:duration);
        fact mem_use = new memory.Use(amount:1.0, start:tp.start, end:end);
    }
}
